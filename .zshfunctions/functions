pexec() {
        print -Pn "\e]0;$TITLE - %~\a"
}

pcmd() {
        print -Pn "\e]0;$TITLE - %~\a"
}

terminfo_down_sc=$terminfo[cud1]$terminfo[cuu1]$terminfo[sc]$terminfo[cud1]
function zle-line-init zle-keymap-select {
	PS1_2="${${KEYMAP/vicmd/-- NORMAL --}/(main|viins)/-- INSERT --}"
	PS1="%{$terminfo_down_sc$PS1_2$terminfo[rc]%}%(?..%B%F{196}☹%f%b)%B%n%b%F{241}%m%f%F{033}%#%f "
	zle reset-prompt
}
preexec () { print -rn -- $terminfo[el]; }


git_branch() {
	git symbolic-ref HEAD 2>/dev/null | cut -c 12-
}

git_branch_modified() {
	unset p
	b=$(git_branch)
	p=" "

	if [ ! $b = "" ]; then
		test "+$(git show-ref | grep "refs/heads/$b" | grep -o '^[^ ]*')" = \
			"+$(git show-ref | grep "refs/remotes/origin/$b" | grep -o '^[^ ]*')" \
			|| p="*"
	fi

	echo $p
}

pr() {
	if [ -f ~/.pin ]; then
		PROJECT_DIR=$(cat ~/.pin)
	fi
	cd $PROJECT_DIR
}

pin() {
	export PROJECT_DIR=`pwd`
	echo $PROJECT_DIR > ~/.pin
}

buc() {
	pushd
	push-all ~/.homesick/repos card
	cd ~/.org && git push card
	cd ~/Projects/scripts && git push card
	popd
	sudo dd if=/dev/sdb bs=4M | gzip -9 > /srv/.card.gz
}

ununzip() {
	rm -r $(unzip -l $1 | grep -v 'Archive:' | grep '[/.]' | sed 's![^a-zA-Z]*\([a-zA-Z./]*\)!\1!')
}

wtd() {
	token=".*"
	if [ $# -gt 0 ]; then
		token="@$1"
	fi

	sed -n -e '/^$/d' -e '/^Next/d' -e '1,/^\S/p' ~/TODO | egrep -v '^\S' | grep $token
}


repo() {
	cd ~/.homesick/repos/$1
}

VARSLOC=~/.newvars

grabvars() {
	for x in DISPLAY GNOME_KEYRING_PID XAUTHORITY GNOME_KEYRING_CONTROL \
		WINDOWPATH DBUS_SESSION_BUS_ADDRESS XDG_SESSION_COOKIE WINDOWID \
		SSH_AGENT_PID SESSION_MANAGER SSH_AUTH_SOCK GIO_LAUNCHED_DESKTOP_FILE_PID \
		GPG_AGENT_INFO 
	do echo "export $x='${(P)x:q}'" 
	done> $VARSLOC
}

sourcevars()
{
	if [ -f $VARSLOC ]; then source $VARSLOC; fi
}


gbp2cad() 
{
	links -dump "http://squidz.heroku.com/gbp/cad/$1.txt"
}

cad2gbp() 
{
	links -dump "http://squidz.heroku.com/cad/gbp/$1.txt"
}

expandurl()
{
	wget -S $1 2>&1 | grep '^Location:'
}

ecbu()
{
	expandurl $(xclip -o)
}

title() 
{
	if (($#argv)); then
		TITLE=$HOSTTITLE
	else
		TITLE="$*"
	fi
}

settitle() {
	printf "\033k$1\033\\"
}

settmuxstatus() {
	tmux set -g status-left "#[fg=colour241]#[bg=colour233]$1 #[fg=colour233]#[bg=colour234]⮀"
}

ssh() {
	settitle "${@: -1}"
	set_tmux_var hostname "${@: -1}"
	command ssh "$@"
	settitle $TITLE
	tmux set-environment -u $(tmux_var hostname)
}

if [ -f ~/.org/.zsh/functions ]; then
	source ~/.org/.zsh/functions
fi

set_tmux_title() {
	if [ -f $PWD/.tmux_title ]; then
		settitle $(cat $PWD/.tmux_title)
	else
		settitle $(basename $PWD)
	fi
}

chpwd_functions=(${chpwd_functions[@]} "set_tmux_title")


jr () {
	ssh devdisp1 java -jar StreamControl-assembly-0.1.jar zk tree
	for box in devdist1 devharv{1..3} devdisp{1..3} devproc1; do \
		echo
		echo -n "$box: "
		ssh $box pgrep java
	done
	echo
}

twid() {
	for user in $*; do
		echo -n "$user: "
		curl -s "twitter.com/$user" | grep -o 'data-user-id="[^"]*"' | sort | uniq -c | sort | tail -n 1 | cut -f 2 -d\" || echo
	done
}



#killall() {
	#if [ $1 = "-u" ]; then
		#if [ $# -lt 3 ]; then
			#echo "I don't like killing everything a user started."
		#else
			#echo \killall $*
		#fi
	#else
		#echo \killall $*
	#fi
#}

# vi: set ft=zsh :
